dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/tX_global.h)
AM_INIT_AUTOMAKE(terminatorX,3.72)
AM_CONFIG_HEADER(config.h)

dnl AC_ARG_ENABLE(closedev, [  --enable-closedev       close audio device if not in use. [default=yes] ])
AC_ARG_ENABLE(sox, [  --enable-sox            use sox as input converter. [default=yes] ])
AC_ARG_ENABLE(mpg123, [  --enable-mpg123         use mpg123 as input converter. [default=yes] ])
AC_ARG_ENABLE(ogg123, [  --enable-ogg123         use ogg123 as input converter. [default=yes] ])
dnl AC_ARG_ENABLE(wavonly,  [  --enable-wavonly        enable the builtin wav routines. (no sox/mpg123) ])
AC_ARG_ENABLE(scheduler,[  --enable-scheduler      enable rt-scheduling (req. root-priv). [default=yes] ])
AC_ARG_ENABLE(debug,    [  --enable-debug          enable debug output. [default=no] ])
dnl AC_ARG_ENABLE(flash,    [  --enable-flash          enable flashes. [default=yes] ])
AC_ARG_ENABLE(3dnow,    [  --enable-3dnow          enables 3DNow! support. [default=no] ])
dnl AC_ARG_ENABLE(benchmark,[  --enable-benchmark      creates a non-functional test version [default=no] ])
AC_ARG_ENABLE(wav,          [  --enable-wav            enables the builtin wav-loader [default=yes] ])
AC_ARG_ENABLE(xsetpointer,  [  --enable-xsetpointer    enables executing of xsetpointer [default=auto] ])
dnl AC_ARG_ENABLE(alsa,         [  --enable-alsa           use ALSA for sound output [default=auto] ])
AC_ARG_ENABLE(oss,          [  --enable-oss            use OSS for sound output [default=auto] ])
AC_ARG_ENABLE(movqfix,	    [  --disable-movqfix       don't use movq fix for gcc >= 2.96 [default=on] ])
dnl AC_ARG_ENABLE(dial,         [  --enable-dial           use dials instead of scales for effects [default=yes] ])
dnl AC_ARG_ENABLE(bigdial,      [  --enable-bigdial        use BIG dials [default=yes] ])
dnl AC_ARG_ENABLE(dga2,     [  --enable-dga2           use DGA2 instead of DGA1. (experimental) [default=no] ])

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

dnl Checks for libraries.
AC_CHECK_LIB(m, floor,, AC_MSG_ERROR([** math-lib not installed or broken **]))
AC_CHECK_LIB(pthread, pthread_mutex_lock,, AC_MSG_ERROR([** POSIX threads not installed or broken **]))
AM_PATH_GTK(1.2.5, , AC_MSG_ERROR([** GTK 1.2.5 not installed or broken **]))
dnl AM_PATH_GLIB(1.2.0, , AC_MSG_ERROR([** GLIB 1.2.0 not installed or broken **]))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h unistd.h)
AC_CHECK_HEADERS(ladspa.h,, AC_MSG_ERROR([** couldn't find ladspa.h - install the ladspa SDK - get it from http://www.ladspa.org **]))

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl Eval args
if test "$enable_closedev" = "no"; then
	AC_DEFINE(KEEP_DEV_OPEN)
fi


if test "$enable_sox" != "no"; then
 	AC_CHECK_PROG(SOX_PROG, sox, yes)
	if test "$SOX_PROG" = "yes"; then
	 	AC_DEFINE(USE_SOX_INPUT)
	fi
fi

if test "$enable_mpg123" != "no"; then
 	AC_CHECK_PROG(MPG123_PROG, mpg123, yes)
	if test "$MPG123_PROG" = "yes"; then
	 	AC_DEFINE(USE_MPG123_INPUT)
	fi
fi

if test "$enable_ogg123" != "no"; then
	AC_CHECK_PROG(OGG123_PROG, ogg123, yes)
	if test "$OGG123_PROG" = "yes"; then
		AC_DEFINE(USE_OGG123_INPUT)
	fi
fi

if test "$enable_xsetpointer" != "no"; then
 	AC_CHECK_PROG(XSETPOINTER_PROG, xsetpointer, yes)
	if test "$XSETPOINTER_PROG" = "yes"; then
	 	AC_DEFINE(USE_XSETPOINTER)
	else
		if test "$enable_xsetpointer" = "yes"; then
			AC_MSG_ERROR([** xsetpointer not found. **])
		fi
	fi
fi

if test "$enable_movqfix" == "no"; then
	AC_DEFINE(OVERRIDE_MOVQ_AUTODETECT)
fi

using_alsa=no
using_oss=no

dnl if test "$enable_alsa" != "no"; then
dnl 	AC_CHECK_LIB(asound, snd_ctl_open,alsalib=yes,alsalib=no)
dnl	AC_CHECK_HEADERS(sys/asoundlib.h,alsaheader=yes,alsaheader=no)
dnl
dnl	if test "$alsalib" = "yes"; then
dnl		if test "$alsaheader" = "yes"; then
dnl			AC_DEFINE(USE_ALSA)
dnl			using_alsa=yes;
dnl		else 
dnl			if test "$enable_alsa" = "yes"; then
dnl				AC_MSG_ERROR([** Coulnd't find ALSA header file sys/asoundlib.h **])
dnl			fi
dnl		fi
dnl	else
dnl		if test "$enable_alsa" = "yes"; then
dnl			AC_MSG_ERROR([** Coulnd'f find ALSA library libasound. **])
dnl		fi
dnl	fi
dnl fi

if test "$enable_oss" != "no"; then
	AC_CHECK_HEADERS(sys/ioctl.h sys/soundcard.h,oss=yes,oss=no)
	
	if test "$oss" = "yes"; then
		AC_DEFINE(USE_OSS)
		using_oss=yes;
	else
		if test "$enable_oss" = "yes"; then
			AC_MSG_ERROR([** Couldn't find OSS header files. ***])
		fi
	fi
fi

dnl if test "$using_alsa" = "yes"; then
dnl 	AC_MSG_RESULT([termnatorX audiodevice: using ALSA.])
dnl fi

if test "$using_oss" = "yes"; then
	AC_MSG_RESULT([termnatorX audiodevice: using OSS.])
fi

if test "$using_alsa" != "yes"; then
	if test "$using_oss" != "yes"; then
		AC_MSG_ERROR([** Found neither OSS nor ALSA! **])
	fi
fi	
	
if test "$enable_wav" != "no";
then
	AC_DEFINE(USE_BUILTIN_WAV)
fi

if test "$enable_flash" = "no"; then
	AC_DEFINE(DONT_USE_FLASH)
fi 

if test "$enable_3dnow" = "yes"; then
	AC_DEFINE(USE_3DNOW)
fi 

if test "$enable_scheduler" != "no"; then
	AC_DEFINE(USE_SCHEDULER)
fi

if test "$enable_debug" = yes; then
	AC_DEFINE(ENABLE_DEBUG_OUTPUT)
fi

if test "$enable_benchmark" = yes; then
	AC_DEFINE(CREATE_BENCHMARK)
fi

dnl AC_MSG_CHECKING(whether to use dials)
dnl if test "$enable_dial" = no; then
dnl 	AC_MSG_RESULT(no)
dnl else
dnl 	AC_MSG_RESULT(yes)
	AC_DEFINE(USE_DIAL)
dnl fi

AC_MSG_CHECKING(for necessary scratching skillz)
AC_MSG_RESULT(yes)

if test "$enable_bigdial" = yes; then
	AC_DEFINE(USE_DIAL)
	AC_DEFINE(USE_BIG_BUTTONS)
fi

if test "$enable_dga2" = yes; then
	AC_DEFINE(USE_DGA2)
fi

dnl Now Check for Xlibs - I do this here as other tests fail if these run earlier
AC_PATH_XTRA

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_libraries)

AC_CHECK_LIB(X11, XOpenDisplay,, AC_MSG_ERROR([** X11-libs not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xext, XShmQueryExtension,, AC_MSG_ERROR([** Xext-libs not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xi, XOpenDevice,, AC_MSG_ERROR([** XInput not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,, AC_MSG_ERROR([** DGA not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
if test "$enable_dga2" = yes; then
	AC_CHECK_LIB(Xxf86dga, XDGASelectInput,, AC_MSG_ERROR([** DGA2 not installed. Try using dga1 instead. **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
fi
AC_OUTPUT(Makefile src/Makefile gnome-support/Makefile src/gui_icons/Makefile src/smallknob/Makefile doc/Makefile doc/img/Makefile terminatorX.spec)
