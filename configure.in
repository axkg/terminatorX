dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/tX_global.h)
AM_INIT_AUTOMAKE(terminatorX, 3.74)
AM_CONFIG_HEADER(config.h)

dnl AC_ARG_ENABLE(closedev, [  --enable-closedev       close audio device if not in use. [default=yes] ])
AC_ARG_ENABLE(sox, [  --enable-sox            use sox as input converter. (default=auto) ])
AC_ARG_ENABLE(mpg123, [  --enable-mpg123         use mpg123 as input converter. (default=auto) ])
AC_ARG_ENABLE(ogg123, [  --enable-ogg123         use ogg123 as input converter. (default=auto) ])
dnl AC_ARG_ENABLE(wavonly,  [  --enable-wavonly        enable the builtin wav routines. ])
dnl AC_ARG_ENABLE(scheduler,[  --enable-scheduler      enable rt-scheduling (req. root-priv). (default=yes) ])
AC_ARG_ENABLE(debug,    [  --enable-debug          enable debug output. (default=no) ])
dnl AC_ARG_ENABLE(3dnow,    [  --enable-3dnow          enables 3DNow! support. (default=no) ])
dnl AC_ARG_ENABLE(benchmark,[  --enable-benchmark      creates a non-functional test version (default=no) ])
AC_ARG_ENABLE(wav,          [  --enable-wav            enables the builtin wav-loader (default=yes) ])
AC_ARG_ENABLE(xsetpointer,  [  --enable-xsetpointer    enables executing of xsetpointer (default=auto) ])
dnl AC_ARG_ENABLE(alsa,         [  --enable-alsa           use ALSA for sound output (default=auto) ])
AC_ARG_ENABLE(oss,          [  --enable-oss            use OSS for sound output (default=auto) ])
dnl AC_ARG_ENABLE(movqfix,	    [  --disable-movqfix       don't use movq fix for gcc >= 2.96 [default=on] ])
dnl AC_ARG_ENABLE(dga2,     [  --enable-dga2           use DGA2 instead of DGA1. (experimental) (default=no) ])
AC_ARG_ENABLE(libxml2,	    [  --disable-libxml2       use libxml even if verion 2 detected (default=auto) ])
AC_ARG_ENABLE(mad,		[  --disable-mad           disable mad for mp3 support (default=auto) ])
AC_ARG_ENABLE(vorbis,	[  --disable-vorbis        disable libvorbis support (default=auto) ])
AC_ARG_ENABLE(audiofile,	[  --disable-audiofile     disable audiofile support (default=auto) ])
AC_ARG_ENABLE(legacy,		[  --disable-legacy        disable support for old terminatorX files (default=on) ])

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

OPTION_SOX="no"
OPTION_MPG123="no"
OPTION_MAD="no"
OPTION_OGG123="no"
OPTION_VORBIS="no"
OPTION_AUDIOFILE="no"
OPTION_WAV="no"
OPTION_GNOME="no"
OPTION_SCHEDULER="no"

dnl Checks for libraries.
AC_CHECK_LIB(m, floor,, AC_MSG_ERROR([** math-lib not installed or broken **]))

dnl Checking whether -pthreads, -lpthreads or simply nothing

tX_threads=no

dnl Some machines don't require any switches for pthread support...

AC_MSG_CHECKING([whether pthreads works without switches])
	no_threads_flags=no
	AC_LANG_SAVE
	AC_LANG_C
	AC_TRY_LINK([#include <pthread.h>], [ pthread_t thread; pthread_create(&thread, NULL, NULL, NULL);],
		no_threads_flags=yes,
		no_threads_flags=no
	)
	AC_LANG_RESTORE
AC_MSG_RESULT([$no_threads_flags])

if test "$no_threads_flags" = "yes"; then
	tX_threads=auto
fi

dnl Some machines prefer the -lpthread...

if test "$tX_threads" = "no"; then
	pthread_lib=no
	AC_CHECK_LIB(pthread, pthread_detach, pthread_lib=yes, pthread_lib=no)
	
	if test "$pthread_lib" = "yes"; then
		tX_threads=lpthread
		LIBS="$LIBS -lpthread"
	fi
fi

dnl Some machines prefer a -pthread...

if test "$tX_threads" = "no"; then
	AC_MSG_CHECKING([whether -pthread is required for pthreads])
		use_gcc_threads=no
		ac_save_CFLAGS=$CFLAGS
		CFLAGS="$CFLAGS -pthread"
		AC_LANG_SAVE
		AC_LANG_C
		AC_TRY_LINK([#include <pthread.h>], [ pthread_t thread; pthread_create(&thread, NULL, NULL, NULL);],
			use_gcc_threads=yes,
			use_gcc_threads=no
		)
		AC_LANG_RESTORE
		CFLAGS=$ac_save_CFLAGS
	AC_MSG_RESULT([$use_gcc_threads])
	
	if test "$use_gcc_threads" = "yes"; then
		tX_threads=gcc
		CFLAGS="$CFLAGS -pthread"
	fi
fi

dnl If we still haven't found pthreads, we panic...

if test "$tX_threads" = "no"; then
	AC_MSG_ERROR([** failed to detect pthreads implementation **])
fi

AM_PATH_GTK_2_0(, [
  GTK2_CFLAGS="$GTK_CFLAGS"
  GTK2_LIBS="$GTK_LIBS"
  gtk2="yes"
  GTK2_VERSION="`$PKG_CONFIG --modversion gtk+-2.0`"], [ gtk2="yes" ]) 
  OPTION_GTK_VERSION="Version 2 - ($GTK2_VERSION)"

if test "$gtk2" = "no"; then
	AC_MSG_ERROR([** couldn't find gtk+ > Version 2. Please upgrade (http://www.gtk.org). **])
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h unistd.h)

dnl Disable LADSPA caching..
unset ac_cv_header_ladspa_h

have_ladspa=no
AC_CHECK_HEADERS(ladspa.h, have_ladspa=yes, have_ladspa=no)

dnl Disable LADSPA caching..
unset ac_cv_header_ladspa_h

dnl Some people install LADSPA in /usr/local

if test "$have_ladspa" = "no"; then
	ac_save_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS -I/usr/local/include"
	AC_CHECK_HEADERS(ladspa.h, have_ladspa=yes, have_ladspa=no)
	CFLAGS=$ac_save_CFLAGS
	
	if test "$have_ladspa" = "yes"; then
		CFLAGS="$CFLAGS -I/usr/local/include"
	fi
fi

if test "$have_ladspa" = "no"; then
	AC_MSG_ERROR([** couldn't find ladspa.h - Install the LADSPA SDK from http://www.ladspa.org first. **])
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl Eval args
if test "$enable_closedev" = "no"; then
	AC_DEFINE(KEEP_DEV_OPEN)
fi


if test "$enable_sox" != "no"; then
 	AC_CHECK_PROG(SOX_PROG, sox, yes)
	if test "$SOX_PROG" = "yes"; then
	 	AC_DEFINE(USE_SOX_INPUT)
		OPTION_SOX="yes"
	fi
fi

if test "$enable_mad" != "no"; then
	AC_CHECK_HEADERS(mad.h,madheader=yes,madheader=no)
	if test "$madheader" = "yes"; then
		AC_CHECK_LIB(mad,mad_decoder_init,madlib=yes,madlib=no)
		if test "$madlib" = "yes"; then
			LIBS="$LIBS -lmad"
			AC_DEFINE(USE_MAD_INPUT)
			OPTION_MAD="yes"
		fi
	fi
fi

if test "$enable_vorbis" != "no"; then
	AC_CHECK_HEADERS(vorbis/codec.h vorbis/vorbisfile.h,vorbis_headers=yes,vorbis_headers="no")
	if test "$vorbis_headers" = "yes"; then
		AC_CHECK_LIB(vorbis,vorbis_info_init,vorbis_libs=yes,vorbis_libs=no)
		if test "$vorbis_libs" = "yes"; then
			PREV_LIBS=LIBS
			LIBS="$LIBS -lvorbis"
			AC_CHECK_LIB(vorbisfile,ov_open_callbacks,vorbisfile_libs=yes,vorbisfile_libs=no)
			if test "$vorbisfile_libs" = "yes"; then
				LIBS="$LIBS -lvorbisfile"
				AC_DEFINE(USE_VORBIS_INPUT)
				OPTION_VORBIS="yes"
			else
				LIBS=PREV_LIBS
			fi
		fi
	fi
fi

if test "$enable_audiofile" != "no"; then
	AC_CHECK_PROG(af_config,audiofile-config,yes,no)
	if test "$af_config" = "yes"; then
		af_cflags=`audiofile-config --cflags`
		if test "$af_cflags" != ""; then
			CFLAGS="$CFLAGS $af_cflags"
		fi
		af_libs=`audiofile-config --libs`
		LIBS="$LIBS $af_libs"
		AC_DEFINE(USE_AUDIOFILE_INPUT)
		OPTION_AUDIOFILE="yes"
	else
		AC_CHECK_HEADERS(audiofile.h,audiofile_headers=yes,audiofile_headers=no)
		if test "$audiofile_headers" = "yes"; then
			AC_CHECK_LIB(audiofile,afOpenFile,audiofile_libs=yes,audiofile_libs=no)
			if test "$audiofile_libs" = "yes"; then
				LIBS="$LIBS -laudiofile"
				AC_DEFINE(USE_AUDIOFILE_INPUT)
				OPTION_AUDIOFILE="yes"
			fi
		fi
	fi
fi

if test "$enable_mpg123" != "no"; then
 	AC_CHECK_PROG(MPG123_PROG, mpg123, yes)
	if test "$MPG123_PROG" = "yes"; then
		if test "$SOX_PROG" = "yes"; then	
		 	AC_DEFINE(USE_MPG123_INPUT)
			OPTION_MPG123="yes"
		else
		 	AC_CHECK_PROG(SOX_PROG, sox, yes)
			if test "$SOX_PROG" = "yes"; then	
			 	AC_DEFINE(USE_MPG123_INPUT)
				OPTION_MPG123="yes"
			else
				AC_MSG_RESULT([** mpg123 support disabled: couldn't find sox! **])
			fi
		fi
	fi
fi

if test "$enable_ogg123" != "no"; then
	AC_CHECK_PROG(OGG123_PROG, ogg123, yes)
	if test "$OGG123_PROG" = "yes"; then
		AC_DEFINE(USE_OGG123_INPUT)
		OPTION_OGG123="yes"
	fi
fi

if test "$enable_xsetpointer" != "no"; then
 	AC_CHECK_PROG(XSETPOINTER_PROG, xsetpointer, yes)
	if test "$XSETPOINTER_PROG" = "yes"; then
	 	AC_DEFINE(USE_XSETPOINTER)
	else
		if test "$enable_xsetpointer" = "yes"; then
			AC_MSG_ERROR([** xsetpointer not found. **])
		fi
	fi
fi

if test "$enable_movqfix" = "no"; then
	AC_DEFINE(OVERRIDE_MOVQ_AUTODETECT)
fi

using_alsa=no
using_oss=no

dnl if test "$enable_alsa" != "no"; then
dnl 	AC_CHECK_LIB(asound, snd_ctl_open,alsalib=yes,alsalib=no)
dnl	AC_CHECK_HEADERS(sys/asoundlib.h,alsaheader=yes,alsaheader=no)
dnl
dnl	if test "$alsalib" = "yes"; then
dnl		if test "$alsaheader" = "yes"; then
dnl			AC_DEFINE(USE_ALSA)
dnl			using_alsa=yes;
dnl		else 
dnl			if test "$enable_alsa" = "yes"; then
dnl				AC_MSG_ERROR([** Coulnd't find ALSA header file sys/asoundlib.h **])
dnl			fi
dnl		fi
dnl	else
dnl		if test "$enable_alsa" = "yes"; then
dnl			AC_MSG_ERROR([** Coulnd'f find ALSA library libasound. **])
dnl		fi
dnl	fi
dnl fi

if test "$enable_oss" != "no"; then
	AC_CHECK_HEADERS(sys/ioctl.h sys/soundcard.h,oss=yes,oss=no)
	
	if test "$oss" = "yes"; then
		AC_DEFINE(USE_OSS)
		using_oss=yes;
	else
		if test "$enable_oss" = "yes"; then
			AC_MSG_ERROR([** Couldn't find OSS header files. ***])
		fi
	fi
fi

dnl if test "$using_alsa" = "yes"; then
dnl 	AC_MSG_RESULT([termnatorX audiodevice: using ALSA.])
dnl fi

if test "$using_oss" = "yes"; then
	AC_MSG_RESULT([termnatorX audiodevice: using OSS.])
fi

if test "$using_alsa" != "yes"; then
	if test "$using_oss" != "yes"; then
		AC_MSG_ERROR([** Found neither OSS nor ALSA! **])
	fi
fi	
	
if test "$enable_wav" != "no";
then
	AC_DEFINE(USE_BUILTIN_WAV)
	OPTION_WAV="yes"
fi

if test "$enable_flash" = "no"; then
	AC_DEFINE(DONT_USE_FLASH)
fi 

if test "$enable_3dnow" = "yes"; then
	AC_DEFINE(USE_3DNOW)
fi 

if test "$enable_scheduler" != "no"; then
	OPTION_SCHEDULER="yes";
	AC_DEFINE(USE_SCHEDULER)
fi

if test "$enable_debug" = yes; then
	AC_DEFINE(ENABLE_DEBUG_OUTPUT)
fi

if test "$enable_benchmark" = yes; then
	AC_DEFINE(CREATE_BENCHMARK)
fi

dnl AC_MSG_CHECKING(whether to use dials)
dnl if test "$enable_dial" = no; then
dnl 	AC_MSG_RESULT(no)
dnl else
dnl 	AC_MSG_RESULT(yes)
	AC_DEFINE(USE_DIAL)
dnl fi

AC_MSG_CHECKING(for necessary scratching skillz)
AC_MSG_RESULT(yes)

if test "$enable_bigdial" = yes; then
	AC_DEFINE(USE_DIAL)
	AC_DEFINE(USE_BIG_BUTTONS)
fi

if test "$enable_legacy" != no; then
	AC_DEFINE(ENABLE_TX_LEGACY)
fi

if test "$enable_dga2" = yes; then
	AC_DEFINE(USE_DGA2)
fi

AC_MSG_CHECKING(for GNOME)
	AC_MSG_RESULT([in progress])
	AC_CHECK_PROG(gnomepresent, gnome-name-service, yes, no)
	if test "$gnomepresent" = yes; then
		AC_CHECK_PROG(gnomeconfig, gnome-config, yes)
		if test "$gnomeconfig" = yes; then
			gnomedatadir=`gnome-config --datadir`
		else
			gnomedatadir=${datadir}
		fi
		AC_SUBST(gnomedatadir)
		AM_CONDITIONAL(GNOMEpresent, test "$gnomepresent" = yes)
   		AC_MSG_RESULT([Found GNOME - installing terminatorX.desktop.])
		OPTION_GNOME="yes"
    	else
   		AC_MSG_RESULT([GNOME not found.])
    	fi


dnl Detecting libxml. Based on dia's test.
found_libxml=false

if test "$enable_libxml2" != "no"; then
	if ! $found_libxml; then
	  AC_CHECK_PROG(XML2_CONFIG, xml2-config, xml2-config)
	  if test "x$XML2_CONFIG" != x ; then
	    AC_MSG_CHECKING(for libxml >= 2.3.9)
	    vers=`$XML2_CONFIG --version | sed -e "s/libxml //" | awk 'BEGIN {FS=".";} { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`

	    if test "$vers" -ge 2003009; then
	      AC_MSG_RESULT(yes)
	      found_libxml=true
	      XML_LIBS="`$XML2_CONFIG --libs`"
	      XML_CFLAGS="`$XML2_CONFIG --cflags`"
	    else
	      AC_MSG_RESULT(no)
	    fi
	  fi
	fi
fi	

if ! $found_libxml 
then
	AC_CHECK_PROG(XML_CONFIG, xml-config, xml-config)
	if test "x$XML_CONFIG" != x ; then
	  AC_MSG_CHECKING(for libxml >= 1.8.14)
	  vers=`$XML_CONFIG --version | sed -e "s/libxml //" | awk 'BEGIN {FS=".";} { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`

	  dnl 1.18.14 is required for xmlUseNewParser()    
	  if test "$vers" -ge 1008014; then
	    AC_MSG_RESULT(yes)
	    found_libxml=true
	    XML_LIBS="`$XML_CONFIG --libs`"
	    XML_CFLAGS="`$XML_CONFIG --cflags`"
	  else
	    AC_MSG_RESULT(no)
	  fi
	fi
fi

if ! $found_libxml; then
    AC_MSG_ERROR([** libxml not found. Get libxml(2) at http://www.libxml.org **])
fi

AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)

CFLAGS="$XML_CFLAGS $CFLAGS"
LIBS="$XML_LIBS $LIBS"

dnl Now Check for Xlibs - I do this here as other tests fail if these run earlier
AC_PATH_XTRA

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_libraries)

GTK_LIBS="$GTK_LIBS $X_LIBS"
AC_CHECK_LIB(X11, XOpenDisplay,, AC_MSG_ERROR([** X11-libs not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xext, XShmQueryExtension,, AC_MSG_ERROR([** Xext-libs not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xi, XOpenDevice,, AC_MSG_ERROR([** XInput not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,, AC_MSG_ERROR([** DGA not installed or broken **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
if test "$enable_dga2" = yes; then
	AC_CHECK_LIB(Xxf86dga, XDGASelectInput,, AC_MSG_ERROR([** DGA2 not installed. Try using dga1 instead. **]), $X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
fi
AC_OUTPUT(Makefile src/Makefile gnome-support/Makefile gnome-support/terminatorX.keys src/gui_icons/Makefile src/smallknob/Makefile doc/Makefile doc/img/Makefile terminatorX.spec terminatorX.1)

function option_info() {
	echo "$option support: $option_val"
	if test "$option_val" != "yes"; then
		echo "	- If you want $option support get $option from"
		echo "	-	$option_url"
		echo "	- and reconfigure terminatorX"
	fi
}

echo
echo configured terminatorX for:
echo ---------------------------
echo

option=sox; option_val=$OPTION_SOX; option_url=http://sox.sourceforge.net/
option_info;

echo "mpg123 support: $OPTION_MPG123"
if test "$OPTION_MPG123" = "no"; then
echo "	- If you want mpg123 support get either mpg321 from"
echo "	-	http://mpg321.sourceforge.net/ or mpg123 from"
echo "	-	http://www.mpg123.de/"
echo "	- and reconfigure terminatorX"
fi

option=mad; option_val=$OPTION_MAD; option_url=http://www.mars.org/home/rob/proj/mpeg/
option_info;

option=ogg123; option_val=$OPTION_OGG123; option_url=http://www.xiph.org/ogg/vorbis/
option_info;

option=libvorbis; option_val=$OPTION_VORBIS; option_url=http://www.xiph.org/ogg/vorbis/
option_info;

option=audiofile; option_val=$OPTION_AUDIOFILE; option_url=http://www.68k.org/~michael/audiofile/
option_info;

echo "builtin-wav support: $OPTION_WAV"
echo "enhanced scheduling support: $OPTION_SCHEDULER"
echo "GNOME support: $OPTION_GNOME"
echo
echo You can now run \'make\' to compile terminatorX
