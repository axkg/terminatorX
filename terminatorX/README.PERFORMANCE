There are several things you can do to improve terminatorX performance:

1. Don't use fancy gtk+ themes
2. Install suid root
3. Compile an optimized binary
4. Optimize your terminatorX setup
5. Optimize your kernel

In Detail:

1. Don't use pixmapped nor other "fat" gtk+-themes.
---------------------------------------------------

The sequencer brings a lot of additional GUI activity. Now the "selfmade"
widgets perform pretty good (no matter what theme you use) but for example
scale widgets are extremly slow with pixmap-themes. The problem is that the
gtk-pixmap engine has to stretch the images and stretching images is a very
CPU-intensive task. So it's best to not use those themes at all.

Now just recently I installed terminatorX on PIII 500 and wondered why it
performed like running on a 486 machine. Now I found that those new fancy
gtk+-themes that bring their own code to draw the widgets eat performance
like mad, too. This even hurts the performance of tX' very own widgets and
therefore hurts playback performance quite a lot. So you shouldn't use these 
kind of themes, neither.

2. Install suid root
--------------------

When run with root privileges terminatorX creates the engine thread
with realtime scheduling priorities which should result in much better
playback performance. Since Version 3.73 terminatorX supports running
suid root. If you install the terminatorX binary suid root with the
following commands: (with the default install you should find the
terminatorX binary in /usr/local/bin)
                
 > chown root terminatorX
 > chmod u+s terminatorX
                
terminatorX will be started with root privileges even when an
"unprivileged" user runs the binary. terminatorX will then create the
engine thread with realtime priority before any files are written, any
parameters are evaluated or connections to the X11 display are
established. Right after that terminatorX will drop root privileges,
so the actual terminatorX code runs unprivileged.
                
The problem is, with Linux' pthreads implementation the pthread
manager thread (that can not be influenced by terminatorX) will still
run with root privileges.
               
So there is a small chance that a malicious attacker could utilize
terminatorX to acquire root privileges if installed suid root,
although it should require quite some effort to create an exploit for
that. On the other hand realtime scheduling massively improves the
playback performance. So depending on who can access your computer you
will have to decide for yourself on performance vs security.
Alternatively you can of course run terminatorX as root to achieve
realtime scheduling.

3. Compile an optimized binary
------------------------------

This issue is covered in the INSTALL file mostly. Setting good optimization
flags is a good idea although this step will proabably have the least effect.

4. Optimize your terminatorX setup
----------------------------------

The default settings for the GUI updates provide good realtime feedback. This
may cause problems on slower machines or evil gtk+-themes. If the GUI-thread
causes dropouts in the audio-engine you should increase the Update-Delay value 
in the options dialog.

5. Optimize your kernel
-----------------------

The current 2.2.X-kernels show a pretty high latency. This is problematic for
near-realtime apps and therefore most linux-audio-apps. Ingo Molnar is
maintaining a patch against the 2.2.x kernels that reduces latency. They are
called "low-latency-patches" and are available from:
http://people.redhat.com/mingo/lowlatency-patches/

Now although latency has improved with the 2.4 releases there is still some
tuning possible with those kernels. There exist patches for those kernels as
well and they may go into the main kernel tree as soon as they're finished.
